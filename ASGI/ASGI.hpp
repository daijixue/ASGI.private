#pragma once

#ifdef ASGI_EXPORTS
#define ASGI_API __declspec(dllexport)
#else
#define ASGI_API __declspec(dllimport)
#endif


#if defined(_MSC_VER) && (_MSC_VER < 1600)
typedef signed   __int8  int8_t;
typedef unsigned __int8  uint8_t;
typedef signed   __int16 int16_t;
typedef unsigned __int16 uint16_t;
typedef signed   __int32 int32_t;
typedef unsigned __int32 uint32_t;
typedef signed   __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
#include <stdint.h>
#endif

#include <vector>
#include "GPUResource.h"

namespace ASGI {
	extern ASGI_API bool GSupportParallelCommandBuffer;

	enum Format {
		FORMAT_UNDEFINED = 0,
		FORMAT_R4G4_UNORM_PACK8 = 1,
		FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
		FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
		FORMAT_R5G6B5_UNORM_PACK16 = 4,
		FORMAT_B5G6R5_UNORM_PACK16 = 5,
		FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
		FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
		FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
		FORMAT_R8_UNORM = 9,
		FORMAT_R8_SNORM = 10,
		FORMAT_R8_USCALED = 11,
		FORMAT_R8_SSCALED = 12,
		FORMAT_R8_UINT = 13,
		FORMAT_R8_SINT = 14,
		FORMAT_R8_SRGB = 15,
		FORMAT_R8G8_UNORM = 16,
		FORMAT_R8G8_SNORM = 17,
		FORMAT_R8G8_USCALED = 18,
		FORMAT_R8G8_SSCALED = 19,
		FORMAT_R8G8_UINT = 20,
		FORMAT_R8G8_SINT = 21,
		FORMAT_R8G8_SRGB = 22,
		FORMAT_R8G8B8_UNORM = 23,
		FORMAT_R8G8B8_SNORM = 24,
		FORMAT_R8G8B8_USCALED = 25,
		FORMAT_R8G8B8_SSCALED = 26,
		FORMAT_R8G8B8_UINT = 27,
		FORMAT_R8G8B8_SINT = 28,
		FORMAT_R8G8B8_SRGB = 29,
		FORMAT_B8G8R8_UNORM = 30,
		FORMAT_B8G8R8_SNORM = 31,
		FORMAT_B8G8R8_USCALED = 32,
		FORMAT_B8G8R8_SSCALED = 33,
		FORMAT_B8G8R8_UINT = 34,
		FORMAT_B8G8R8_SINT = 35,
		FORMAT_B8G8R8_SRGB = 36,
		FORMAT_R8G8B8A8_UNORM = 37,
		FORMAT_R8G8B8A8_SNORM = 38,
		FORMAT_R8G8B8A8_USCALED = 39,
		FORMAT_R8G8B8A8_SSCALED = 40,
		FORMAT_R8G8B8A8_UINT = 41,
		FORMAT_R8G8B8A8_SINT = 42,
		FORMAT_R8G8B8A8_SRGB = 43,
		FORMAT_B8G8R8A8_UNORM = 44,
		FORMAT_B8G8R8A8_SNORM = 45,
		FORMAT_B8G8R8A8_USCALED = 46,
		FORMAT_B8G8R8A8_SSCALED = 47,
		FORMAT_B8G8R8A8_UINT = 48,
		FORMAT_B8G8R8A8_SINT = 49,
		FORMAT_B8G8R8A8_SRGB = 50,
		FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
		FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
		FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
		FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
		FORMAT_A8B8G8R8_UINT_PACK32 = 55,
		FORMAT_A8B8G8R8_SINT_PACK32 = 56,
		FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
		FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
		FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
		FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
		FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
		FORMAT_A2R10G10B10_UINT_PACK32 = 62,
		FORMAT_A2R10G10B10_SINT_PACK32 = 63,
		FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
		FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
		FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
		FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
		FORMAT_A2B10G10R10_UINT_PACK32 = 68,
		FORMAT_A2B10G10R10_SINT_PACK32 = 69,
		FORMAT_R16_UNORM = 70,
		FORMAT_R16_SNORM = 71,
		FORMAT_R16_USCALED = 72,
		FORMAT_R16_SSCALED = 73,
		FORMAT_R16_UINT = 74,
		FORMAT_R16_SINT = 75,
		FORMAT_R16_SFLOAT = 76,
		FORMAT_R16G16_UNORM = 77,
		FORMAT_R16G16_SNORM = 78,
		FORMAT_R16G16_USCALED = 79,
		FORMAT_R16G16_SSCALED = 80,
		FORMAT_R16G16_UINT = 81,
		FORMAT_R16G16_SINT = 82,
		FORMAT_R16G16_SFLOAT = 83,
		FORMAT_R16G16B16_UNORM = 84,
		FORMAT_R16G16B16_SNORM = 85,
		FORMAT_R16G16B16_USCALED = 86,
		FORMAT_R16G16B16_SSCALED = 87,
		FORMAT_R16G16B16_UINT = 88,
		FORMAT_R16G16B16_SINT = 89,
		FORMAT_R16G16B16_SFLOAT = 90,
		FORMAT_R16G16B16A16_UNORM = 91,
		FORMAT_R16G16B16A16_SNORM = 92,
		FORMAT_R16G16B16A16_USCALED = 93,
		FORMAT_R16G16B16A16_SSCALED = 94,
		FORMAT_R16G16B16A16_UINT = 95,
		FORMAT_R16G16B16A16_SINT = 96,
		FORMAT_R16G16B16A16_SFLOAT = 97,
		FORMAT_R32_UINT = 98,
		FORMAT_R32_SINT = 99,
		FORMAT_R32_SFLOAT = 100,
		FORMAT_R32G32_UINT = 101,
		FORMAT_R32G32_SINT = 102,
		FORMAT_R32G32_SFLOAT = 103,
		FORMAT_R32G32B32_UINT = 104,
		FORMAT_R32G32B32_SINT = 105,
		FORMAT_R32G32B32_SFLOAT = 106,
		FORMAT_R32G32B32A32_UINT = 107,
		FORMAT_R32G32B32A32_SINT = 108,
		FORMAT_R32G32B32A32_SFLOAT = 109,
		FORMAT_R64_UINT = 110,
		FORMAT_R64_SINT = 111,
		FORMAT_R64_SFLOAT = 112,
		FORMAT_R64G64_UINT = 113,
		FORMAT_R64G64_SINT = 114,
		FORMAT_R64G64_SFLOAT = 115,
		FORMAT_R64G64B64_UINT = 116,
		FORMAT_R64G64B64_SINT = 117,
		FORMAT_R64G64B64_SFLOAT = 118,
		FORMAT_R64G64B64A64_UINT = 119,
		FORMAT_R64G64B64A64_SINT = 120,
		FORMAT_R64G64B64A64_SFLOAT = 121,
		FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
		FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
		FORMAT_D16_UNORM = 124,
		FORMAT_X8_D24_UNORM_PACK32 = 125,
		FORMAT_D32_SFLOAT = 126,
		FORMAT_S8_UINT = 127,
		FORMAT_D16_UNORM_S8_UINT = 128,
		FORMAT_D24_UNORM_S8_UINT = 129,
		FORMAT_D32_SFLOAT_S8_UINT = 130,
		FORMAT_BC1_RGB_UNORM_BLOCK = 131,
		FORMAT_BC1_RGB_SRGB_BLOCK = 132,
		FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
		FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
		FORMAT_BC2_UNORM_BLOCK = 135,
		FORMAT_BC2_SRGB_BLOCK = 136,
		FORMAT_BC3_UNORM_BLOCK = 137,
		FORMAT_BC3_SRGB_BLOCK = 138,
		FORMAT_BC4_UNORM_BLOCK = 139,
		FORMAT_BC4_SNORM_BLOCK = 140,
		FORMAT_BC5_UNORM_BLOCK = 141,
		FORMAT_BC5_SNORM_BLOCK = 142,
		FORMAT_BC6H_UFLOAT_BLOCK = 143,
		FORMAT_BC6H_SFLOAT_BLOCK = 144,
		FORMAT_BC7_UNORM_BLOCK = 145,
		FORMAT_BC7_SRGB_BLOCK = 146,
		FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
		FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
		FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
		FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
		FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
		FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
		FORMAT_EAC_R11_UNORM_BLOCK = 153,
		FORMAT_EAC_R11_SNORM_BLOCK = 154,
		FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
		FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
		FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
		FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
		FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
		FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
		FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
		FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
		FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
		FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
		FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
		FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
		FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
		FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
		FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
		FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
		FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
		FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
		FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
		FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
		FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
		FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
		FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
		FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
		FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
		FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
		FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
		FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
		FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
		FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
		FORMAT_G8B8G8R8_422_UNORM = 1000156000,
		FORMAT_B8G8R8G8_422_UNORM = 1000156001,
		FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
		FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
		FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
		FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
		FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
		FORMAT_R10X6_UNORM_PACK16 = 1000156007,
		FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
		FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
		FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
		FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
		FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
		FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
		FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
		FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
		FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
		FORMAT_R12X4_UNORM_PACK16 = 1000156017,
		FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
		FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
		FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
		FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
		FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
		FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
		FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
		FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
		FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
		FORMAT_G16B16G16R16_422_UNORM = 1000156027,
		FORMAT_B16G16R16G16_422_UNORM = 1000156028,
		FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
		FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
		FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
		FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
		FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
		FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
		FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
		FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
		FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
		FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
		FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
		FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
		FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
		FORMAT_G8B8G8R8_422_UNORM_KHR = FORMAT_G8B8G8R8_422_UNORM,
		FORMAT_B8G8R8G8_422_UNORM_KHR = FORMAT_B8G8R8G8_422_UNORM,
		FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = FORMAT_G8_B8_R8_3PLANE_420_UNORM,
		FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = FORMAT_G8_B8R8_2PLANE_420_UNORM,
		FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = FORMAT_G8_B8_R8_3PLANE_422_UNORM,
		FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = FORMAT_G8_B8R8_2PLANE_422_UNORM,
		FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = FORMAT_G8_B8_R8_3PLANE_444_UNORM,
		FORMAT_R10X6_UNORM_PACK16_KHR = FORMAT_R10X6_UNORM_PACK16,
		FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = FORMAT_R10X6G10X6_UNORM_2PACK16,
		FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
		FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
		FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
		FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
		FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
		FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
		FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
		FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
		FORMAT_R12X4_UNORM_PACK16_KHR = FORMAT_R12X4_UNORM_PACK16,
		FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = FORMAT_R12X4G12X4_UNORM_2PACK16,
		FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
		FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
		FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
		FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
		FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
		FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
		FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
		FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
		FORMAT_G16B16G16R16_422_UNORM_KHR = FORMAT_G16B16G16R16_422_UNORM,
		FORMAT_B16G16R16G16_422_UNORM_KHR = FORMAT_B16G16R16G16_422_UNORM,
		FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = FORMAT_G16_B16_R16_3PLANE_420_UNORM,
		FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = FORMAT_G16_B16R16_2PLANE_420_UNORM,
		FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = FORMAT_G16_B16_R16_3PLANE_422_UNORM,
		FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = FORMAT_G16_B16R16_2PLANE_422_UNORM,
		FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = FORMAT_G16_B16_R16_3PLANE_444_UNORM
	} ;
	extern uint8_t GetFormatSize(Format format);

	enum VertexFormat {
		VF_Float1 = Format::FORMAT_R32_SFLOAT,
		VF_Float2 = Format::FORMAT_R32G32_SFLOAT,
		VF_Float3 = Format::FORMAT_R32G32B32_SFLOAT,
		VF_Float4 = Format::FORMAT_R32G32B32A32_SFLOAT,
	};

	enum DescriptorType {
		DESCRIPTOR_TYPE_SAMPLER = 0,
		DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
		DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
		DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
		DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
		DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
		DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
		DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
		DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
		DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
		DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10
	};

	enum ShaderStageFlagBits {
		SHADER_STAGE_VERTEX_BIT = 0x00000001,
		SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002,
		SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,
		SHADER_STAGE_GEOMETRY_BIT = 0x00000008,
		SHADER_STAGE_FRAGMENT_BIT = 0x00000010,
		SHADER_STAGE_COMPUTE_BIT = 0x00000020,
		SHADER_STAGE_ALL_GRAPHICS = 0x0000001F
	} ;
	typedef uint32_t ShaderStageFlags;


	enum CullModeFlagBits {
		CULL_MODE_NONE = 0,
		CULL_MODE_FRONT_BIT = 0x00000001,
		CULL_MODE_BACK_BIT = 0x00000002,
		CULL_MODE_FRONT_AND_BACK = 0x00000003
	};
	typedef uint32_t CullModeFlags;

	enum PrimitiveTopology {
		PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
		PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
		PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
		PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
		PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
		PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
		PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
		PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
		PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
		PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
		PRIMITIVE_TOPOLOGY_PATCH_LIST = 10
	} ;

	enum PolygonMode {
		POLYGON_MODE_FILL = 0,
		POLYGON_MODE_LINE = 1,
		POLYGON_MODE_POINT = 2
	};

	enum FrontFace {
		FRONT_FACE_COUNTER_CLOCKWISE = 0,
		FRONT_FACE_CLOCKWISE = 1
	};

	enum CompareOp {
		COMPARE_OP_NEVER = 0,
	    COMPARE_OP_LESS = 1,
		COMPARE_OP_EQUAL = 2,
		COMPARE_OP_LESS_OR_EQUAL = 3,
		COMPARE_OP_GREATER = 4,
		COMPARE_OP_NOT_EQUAL = 5,
		COMPARE_OP_GREATER_OR_EQUAL = 6,
		COMPARE_OP_ALWAYS = 7
	};

	enum StencilOp {
		STENCIL_OP_KEEP = 0,
		STENCIL_OP_ZERO = 1,
		STENCIL_OP_REPLACE = 2,
		STENCIL_OP_INCREMENT_AND_CLAMP = 3,
		STENCIL_OP_DECREMENT_AND_CLAMP = 4,
		STENCIL_OP_INVERT = 5,
		STENCIL_OP_INCREMENT_AND_WRAP = 6,
		STENCIL_OP_DECREMENT_AND_WRAP = 7
	};

	enum LogicOp {
		LOGIC_OP_CLEAR = 0,
		LOGIC_OP_AND = 1,
		LOGIC_OP_AND_REVERSE = 2,
		LOGIC_OP_COPY = 3,
		LOGIC_OP_AND_INVERTED = 4,
		LOGIC_OP_NO_OP = 5,
		LOGIC_OP_XOR = 6,
		LOGIC_OP_OR = 7,
		LOGIC_OP_NOR = 8,
		LOGIC_OP_EQUIVALENT = 9,
		LOGIC_OP_INVERT = 10,
		LOGIC_OP_OR_REVERSE = 11,
		LOGIC_OP_COPY_INVERTED = 12,
		LOGIC_OP_OR_INVERTED = 13,
		LOGIC_OP_NAND = 14,
		LOGIC_OP_SET = 15
	};

	enum BlendFactor {
		BLEND_FACTOR_ZERO = 0,
		BLEND_FACTOR_ONE = 1,
		BLEND_FACTOR_SRC_COLOR = 2,
		BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
		BLEND_FACTOR_DST_COLOR = 4,
		BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
		BLEND_FACTOR_SRC_ALPHA = 6,
		BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
		BLEND_FACTOR_DST_ALPHA = 8,
		BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
		BLEND_FACTOR_CONSTANT_COLOR = 10,
		BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
		BLEND_FACTOR_CONSTANT_ALPHA = 12,
		BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
		BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
		BLEND_FACTOR_SRC1_COLOR = 15,
		BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
		BLEND_FACTOR_SRC1_ALPHA = 17
	};

	enum BlendOp {
		BLEND_OP_ADD = 0,
		BLEND_OP_SUBTRACT = 1,
		BLEND_OP_REVERSE_SUBTRACT = 2,
		BLEND_OP_MIN = 3,
		BLEND_OP_MAX = 4
	};

	enum ColorComponentFlagBits {
		COLOR_COMPONENT_R_BIT = 0x00000001,
		COLOR_COMPONENT_G_BIT = 0x00000002,
		COLOR_COMPONENT_B_BIT = 0x00000004,
		COLOR_COMPONENT_A_BIT = 0x00000008
	};
	typedef uint32_t ColorComponentFlags;

	enum Filter {
		FILTER_NEAREST = 0,
		FILTER_LINEAR = 1
	};

	enum SamplerMipmapMode {
		SAMPLER_MIPMAP_MODE_NEAREST = 0,
		SAMPLER_MIPMAP_MODE_LINEAR = 1
	};

	enum SamplerAddressMode {
		SAMPLER_ADDRESS_MODE_REPEAT = 0,
		SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
		SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
		SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
		SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4
	};

	enum SampleCountFlagBits {
		SAMPLE_COUNT_1_BIT = 0x00000001,
		SAMPLE_COUNT_2_BIT = 0x00000002,
		SAMPLE_COUNT_4_BIT = 0x00000004,
		SAMPLE_COUNT_8_BIT = 0x00000008,
		SAMPLE_COUNT_16_BIT = 0x00000010,
		SAMPLE_COUNT_32_BIT = 0x00000020,
		SAMPLE_COUNT_64_BIT = 0x00000040
	};
	typedef uint32_t SampleCountFlags;

	enum QueueFlagBits {
		QUEUE_GRAPHICS_BIT = 0x00000001,
		QUEUE_COMPUTE_BIT = 0x00000002,
		QUEUE_TRANSFER_BIT = 0x00000004,
		QUEUE_SPARSE_BINDING_BIT = 0x00000008,
		QUEUE_PROTECTED_BIT = 0x00000010
	};
	typedef uint32_t QueueFlags;
	//

	struct Viewport {
		float    x;
		float    y;
		float    width;
		float    height;
		float    minDepth;
		float    maxDepth;
	};

	struct Offset2D {
		int32_t    x;
		int32_t    y;
	};

	struct Extent2D {
		uint32_t    width;
		uint32_t    height;
	};

	struct Rect2D {
		Offset2D    offset;
		Extent2D    extent;
	};

	struct ShaderModuleCreateInfo {
		const char* path;
		uint32_t codeSize;
		char* pcode;
	};

	struct SwapchainCreateInfo {
		void* windowHandle;
		uint32_t sizeX;
		uint32_t sizeY;
		bool isFullScreen;
		Format preferredPixelFormat;
		bool vsync;
	};

	struct PipelineShaderStage {
		ShaderModule* pVertexShader;
		ShaderModule* pGeomteryShader;
		ShaderModule* pTessControlShader;
		ShaderModule* pTessEvaluationShader;
		ShaderModule* pFragmentShader;
	};

	struct VertexInputItem {
		uint8_t bindingNumber;
		uint8_t offset;
		VertexFormat format;
		uint8_t location;
	};

	struct PipelineVertexDeclaration {
		std::vector<VertexInputItem> vertexInputs;
	};

	struct PipelineInputAssemblyState {
		PrimitiveTopology toplogy = PrimitiveTopology::PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
		bool primitiveRestartEnable = true;
	};

	struct PipelineRasterizationState {
		bool                                 depthClampEnable = false;
		bool                                   rasterizerDiscardEnable = false;
		PolygonMode                              polygonMode = PolygonMode::POLYGON_MODE_FILL;
		CullModeFlags                            cullMode = CullModeFlagBits::CULL_MODE_BACK_BIT;
		FrontFace                                frontFace = FrontFace::FRONT_FACE_COUNTER_CLOCKWISE;
		bool                                 depthBiasEnable = false;
	};

	struct PipelineMultisampleState {
		SampleCountFlagBits                    rasterizationSamples = SampleCountFlagBits::SAMPLE_COUNT_1_BIT;
	};

	struct StencilOpState {
		StencilOp    failOp = StencilOp::STENCIL_OP_KEEP;
		StencilOp    passOp = StencilOp::STENCIL_OP_KEEP;
		StencilOp    depthFailOp = StencilOp::STENCIL_OP_KEEP;
		CompareOp    compareOp = CompareOp::COMPARE_OP_NEVER;
		uint32_t       compareMask = 0;
		uint32_t       writeMask = 0;
		uint32_t       reference = 0;
	};

	struct PipelineDepthStencilState {
		bool                                 depthTestEnable = true;
		bool                                  depthWriteEnable = true;
		CompareOp                               depthCompareOp = CompareOp::COMPARE_OP_LESS;
		bool                                depthBoundsTestEnable = false;
		bool                                stencilTestEnable = false;
		StencilOpState                          front;
		StencilOpState                          back;
		float                                     minDepthBounds = 0.0f;
		float                                     maxDepthBounds = 1.0f;
	};

	struct PipelineColorBlendAttachmentState {
		bool                       blendEnable = false;
		BlendFactor            srcColorBlendFactor;
		BlendFactor            dstColorBlendFactor;
		BlendOp                colorBlendOp;
		BlendFactor            srcAlphaBlendFactor;
		BlendFactor            dstAlphaBlendFactor;
		BlendOp                alphaBlendOp;
		uint32_t                 colorWriteMask;
	};

	struct PipelineColorBlendState {
		bool                                                                                    logicOpEnable = false;
		LogicOp                                                                             logicOp = LogicOp::LOGIC_OP_COPY;
		std::vector<PipelineColorBlendAttachmentState>  Attachments;
		float                                                                                     blendConstants[4] = { 0.0f, 0.0f, 0.0f, 0.0f };
	};

	struct GraphicsPipelineCreateInfo {
		uint8_t viewportCount = 1;
		PipelineShaderStage shaderStage;
		PipelineVertexDeclaration vertexDeclaration;
		PipelineInputAssemblyState inputAssemblyState;
		PipelineRasterizationState rasterizationState;
		PipelineMultisampleState multisampleState;
		PipelineDepthStencilState depthStencilState;
		PipelineColorBlendState colorBlendState;
	};

	struct VertexBufferCreateInfo {

	};

	struct IndexBufferCreateInfo {

	};

	struct UniformBufferCreateInfo {

	};

	struct CommandBufferCreateInfo {

	};

	struct  Texture2DCreateInfo
	{

	};
}